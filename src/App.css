body {
  background-color: rgb(23,23,23);
}

:root {
  --background-color: #1f2937;
  --ambient-glow-color: rgba(255, 84, 5, 0.8);
  --text-shadow-color: #DFE3E9;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background-color: #1f2937;
    --ambient-glow-color: rgba(59, 130, 246, 0.8);
    --text-shadow-color: #374151;
  }
}

.text-shadow {
  color: var(--text-shadow-color);
}

/* #root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
} */

@property --rotating-border-color {
  syntax: "<color>";
  initial-value: 0;
  inherits: true;
}

@property --rotating-border-angle {
  syntax: "<angle>";
  initial-value: 0deg;
  inherits: false;
}

.rotating-border-wrapper {
  position: relative;
  border-radius: 0.75rem;
  
  background-image: conic-gradient(
    from var(--rotating-border-angle, 0deg),
    transparent 25%,
    var(--rotating-border-color) 90%,
    transparent 95%
  );
    
  animation: spin 2s linear infinite;
  transition: padding 0.1s linear;
  
  /* Start hidden until hover */
  padding: 0px; /* thickness of the border */
}

.rotating-border-wrapper::after {
  content: '';
  position: absolute;
  inset: 0;
  z-index: -1; /* behind content */
  pointer-events: none;

  border-radius: 0.75rem;

  /* Glow */
  background: var(--rotating-border-color);
  filter: blur(10px);

  /* Start hidden until hover */
  opacity: 0;
  transition: opacity 0.3s ease;
}

.rotating-border-wrapper:hover::after {
  opacity: 0.3;
}

.rotating-border-wrapper:hover {
  transform: scale(1.01);
  padding: 1.5px;
  z-index: 10;
}

.rotating-border-card {
  border-radius: 0.75rem;
  padding: 1rem;
}

@keyframes spin {
  to {
    --rotating-border-angle: 360deg;
  }
}

.rotating-border-card > .rotating-border-card-icon {
  position: absolute;
  width: 6rem;
  z-index: 100;
  
  top: 0;
  right: 0;
  
  transform: translate(35%, -35%);
  opacity: 0;

  transition: transform 0.01s linear;
  pointer-events: none; /* prevents blocking hover on card */
}

.rotating-border-card:hover > .rotating-border-card-icon {
  opacity: 1;
  animation: bounce-out 0.6s ease;
}

@keyframes fade-in {
  to {
    opacity: 1
  }
}

/* Bounce from inner to outer */
@keyframes bounce-out {
  0% {
    transform: translate(5%, -5%) scale(0.9);
  }
  50% {
    transform: translate(45%, -45%) scale(1.05);
  }
  70% {
    transform: translate(32%, -32%) scale(1);
  }
  100% {
    transform: translate(35%, -35%) scale(1);
  }
}

@keyframes glitch {
  0%, 100% { clip-path: inset(0 0 0 0); transform: translate(0); }
  20% { clip-path: inset(10% 0 85% 0); transform: translate(-3px, -1px); }
  40% { clip-path: inset(85% 0 10% 0); transform: translate(3px, 1px); }
  60% { clip-path: inset(10% 0 85% 0); transform: translate(-3px, 1px); }
  80% { clip-path: inset(85% 0 10% 0); transform: translate(3px, -1px); }
}
.glitch-effect {
  position: relative;
}
.glitch-effect::before,
.glitch-effect::after {
  content: '';
  position: absolute;
  inset: 0;
  background: inherit;
  mix-blend-mode: screen;
  animation: glitch 2s infinite;
}
.glitch-effect::before {
  left: 2px;
  text-shadow: -2px 0 red;
}
.glitch-effect::after {
  left: -2px;
  text-shadow: -2px 0 blue;
}


.button {
  --bezier: cubic-bezier(0.22, 0.61, 0.36, 1);
  --edge-light: hsla(0, 0%, 50%, 0.8);
  --text-light: rgba(255, 255, 255, 0.4);
  --back-color: 14, 80%;

  cursor: pointer;
  padding: 0.7em 1em;
  border-radius: 0.5em;
  min-height: 2.4em;
  min-width: 3em;
  display: flex;
  align-items: center;
  gap: 0.5em;

  font-size: 18px;
  letter-spacing: 0.1em;
  line-height: 1;
  font-weight: bold;

  background: linear-gradient(
    140deg,
    hsla(var(--back-color), 50%, 1) min(2em, 20%),
    hsla(var(--back-color), 50%, 0.6) min(8em, 100%)
  );
  color: hsla(0, 0%, 90%);
  border: 0;
  box-shadow: inset 0.4px 1px 4px var(--edge-light);

  transition: all 0.1s var(--bezier);
}

.button:hover {
  --text-light: rgba(255, 255, 255, 1);

  background: linear-gradient(
    140deg,
    hsla(var(--back-color), 50%, 1) min(2em, 20%),
    hsla(var(--back-color), 50%, 0.6) min(8em, 100%)
  );
  box-shadow: inset 0.4px 1px 8px var(--edge-light),
    0px 0px 8px hsla(var(--back-color), 50%, 0.6);
  text-shadow: 0px 0px 20px var(--text-light);
  color: hsla(0, 0%, 100%, 1);
  letter-spacing: 0.05em;
}



/* Container to hold the icon + shadow */
.levitate {
  display: inline-block;
}

/* The icon itself */
.levitate .icon {
  animation: float 3s ease-in-out infinite;
}

.levitate .animate-delay-250 { animation-delay: 0.25s; }
.levitate .animate-delay-500 { animation-delay: 0.5s; }
.levitate .animate-delay-750 { animation-delay: 0.75s; }
.levitate .animate-delay-1000 { animation-delay: 1s; }

/* The shadow */
.levitate::after {
  content: "";
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 50%;
  height: 12px;
  background: radial-gradient(ellipse at center, rgba(0,0,0,0.3) 0%, transparent 80%);
  border-radius: 50%;
  animation: shadowPulse 3s ease-in-out infinite;
}

/* Floating motion */
@keyframes float {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-20px);
  }
}

/* Shadow change (wider + lighter when higher, tighter + darker when closer) */
@keyframes shadowPulse {
  0%, 100% {
    transform: translateX(-50%) scaleX(1) scaleY(0.7);
    opacity: 0.4;
  }
  50% {
    transform: translateX(-50%) scaleX(1.3) scaleY(0.5);
    opacity: 0.2;
  }
}

html, body {
  overflow-x: hidden;
}

.glow {
  position: absolute;
  z-index: 0;
  background: radial-gradient(ellipse, var(--ambient-glow-color), transparent 70%);
  filter: blur(100px);
}

.glow-from-left {
  position: absolute;
  z-index: 0;
  background: radial-gradient(ellipse at 0 0, var(--ambient-glow-color), transparent 70%);
  filter: blur(100px);
}

.glow-from-right {
  position: absolute;
  z-index: 0;
  background: radial-gradient(ellipse at 100% 100%, var(--ambient-glow-color), transparent 70%);
  filter: blur(100px);
}